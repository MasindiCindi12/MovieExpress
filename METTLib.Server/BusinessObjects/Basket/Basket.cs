// Generated 18 Nov 2021 12:19 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Basket
{
    [Serializable]
    public class Basket
     : SingularBusinessBase<Basket>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> BasketIDProperty = RegisterProperty<int>(c => c.BasketID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int BasketID
        {
            get { return GetProperty(BasketIDProperty); }
        }

        public static PropertyInfo<int?> ItemIDProperty = RegisterProperty<int?>(c => c.ItemID, "Item", null);
        /// <summary>
        /// Gets and sets the Item value
        /// </summary>
        [Display(Name = "Item", Description = "")]
        public int? ItemID
        {
            get { return GetProperty(ItemIDProperty); }
            set { SetProperty(ItemIDProperty, value); }
        }

        public static PropertyInfo<int?> MovieItemIDProperty = RegisterProperty<int?>(c => c.MovieItemID, "Movie Item", null);
        /// <summary>
        /// Gets and sets the Movie Item value
        /// </summary>
        [Display(Name = "Movie Item", Description = "")]
        public int? MovieItemID
        {
            get { return GetProperty(MovieItemIDProperty); }
            set { SetProperty(MovieItemIDProperty, value); }
        }

        public static PropertyInfo<int?> UserIDProperty = RegisterProperty<int?>(c => c.UserID, "User", null);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = "")]
        public int? UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }

        public static PropertyInfo<String> ItemDescriptionProperty = RegisterProperty<String>(c => c.ItemDescription, "Item Description", "");
        /// <summary>
        /// Gets and sets the Item Description value
        /// </summary>
        [Display(Name = "Item Description", Description = ""),
        StringLength(200, ErrorMessage = "Item Description cannot be more than 200 characters")]
        public String ItemDescription
        {
            get { return GetProperty(ItemDescriptionProperty); }
            set { SetProperty(ItemDescriptionProperty, value); }
        }

        public static PropertyInfo<int> itemQtyProperty = RegisterProperty<int>(c => c.itemQty, "Item Qty", 0);
        /// <summary>
        /// Gets and sets the Item Qty value
        /// </summary>
        [Display(Name = "Item Qty", Description = ""),
        Required(ErrorMessage = "Item Qty required")]
        public int itemQty
        {
            get { return GetProperty(itemQtyProperty); }
            set { SetProperty(itemQtyProperty, value); }
        }

        public static PropertyInfo<Decimal> itemPriceProperty = RegisterProperty<Decimal>(c => c.itemPrice, "Item Price", 0D);
        /// <summary>
        /// Gets and sets the Item Price value
        /// </summary>
        [Display(Name = "Item Price", Description = ""),
        Required(ErrorMessage = "Item Price required")]
        public Decimal itemPrice
        {
            get { return GetProperty(itemPriceProperty); }
            set { SetProperty(itemPriceProperty, value); }
        }

        public static PropertyInfo<Decimal> TotalPriceProperty = RegisterProperty<Decimal>(c => c.TotalPrice, "Total Price", 0D);
        /// <summary>
        /// Gets and sets the Total Price value
        /// </summary>
        [Display(Name = "Total Price", Description = "")]
        public Decimal TotalPrice
        {
            get { return GetProperty(TotalPriceProperty); }
            set { SetProperty(TotalPriceProperty, value); }
        }

        public static PropertyInfo<DateTime?> BasketDateProperty = RegisterProperty<DateTime?>(c => c.BasketDate, "Basket Date");
        /// <summary>
        /// Gets and sets the Basket Date value
        /// </summary>
        [Display(Name = "Basket Date", Description = "")]
        public DateTime? BasketDate
        {
            get
            {
                return GetProperty(BasketDateProperty);
            }
            set
            {
                SetProperty(BasketDateProperty, value);
            }
        }

        public static PropertyInfo<Boolean?> IsActiveIndProperty = RegisterProperty<Boolean?>(c => c.IsActiveInd, "Is Active", null);
        /// <summary>
        /// Gets and sets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = "")]
        public Boolean? IsActiveInd
        {
            get { return GetProperty(IsActiveIndProperty); }
            set { SetProperty(IsActiveIndProperty, value); }
        }

        public static PropertyInfo<DateTime?> DeleteDateProperty = RegisterProperty<DateTime?>(c => c.DeleteDate, "Delete Date");
        /// <summary>
        /// Gets and sets the Delete Date value
        /// </summary>
        [Display(Name = "Delete Date", Description = "")]
        public DateTime? DeleteDate
        {
            get
            {
                return GetProperty(DeleteDateProperty);
            }
            set
            {
                SetProperty(DeleteDateProperty, value);
            }
        }

        public static PropertyInfo<int> DeletedByProperty = RegisterProperty<int>(c => c.DeletedBy, "Deleted By", 0);
        /// <summary>
        /// Gets and sets the Deleted By value
        /// </summary>
        [Display(Name = "Deleted By", Description = "")]
        public int DeletedBy
        {
            get { return GetProperty(DeletedByProperty); }
            set { SetProperty(DeletedByProperty, value); }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<SmartDate> ModifiedDateProperty = RegisterProperty<SmartDate>(c => c.ModifiedDate, "Modified Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Modified Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate ModifiedDate
        {
            get { return GetProperty(ModifiedDateProperty); }
        }

        public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
        /// <summary>
        /// Gets the Modified By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int ModifiedBy
        {
            get { return GetProperty(ModifiedByProperty); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(BasketIDProperty);
        }

        public override string ToString()
        {
            if (this.ItemDescription.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Basket");
                }
                else
                {
                    return String.Format("Blank {0}", "Basket");
                }
            }
            else
            {
                return this.ItemDescription;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewBasket() method.
        }

        public static Basket NewBasket()
        {
            return DataPortal.CreateChild<Basket>();
        }

        public Basket()
        {
            MarkAsChild();
        }

        internal static Basket GetBasket(SafeDataReader dr)
        {
            var b = new Basket();
            b.Fetch(dr);
            return b;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(BasketIDProperty, sdr.GetInt32(i++));
                LoadProperty(ItemIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(MovieItemIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(ItemDescriptionProperty, sdr.GetString(i++));
                LoadProperty(itemQtyProperty, sdr.GetInt32(i++));
                LoadProperty(itemPriceProperty, sdr.GetDecimal(i++));
                LoadProperty(TotalPriceProperty, sdr.GetDecimal(i++));
                LoadProperty(BasketDateProperty, sdr.GetValue(i++));
                object tmpIsActiveInd = sdr.GetValue(i++);
                if (tmpIsActiveInd == System.DBNull.Value)
                {
                    LoadProperty(IsActiveIndProperty, null);
                }
                else
                {
                    LoadProperty(IsActiveIndProperty, (bool?)tmpIsActiveInd);
                }
                LoadProperty(DeleteDateProperty, sdr.GetValue(i++));
                LoadProperty(DeletedByProperty, sdr.GetInt32(i++));
                LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
                LoadProperty(ModifiedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
                LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

            AddPrimaryKeyParam(cm, BasketIDProperty);

            cm.Parameters.AddWithValue("@ItemID", Singular.Misc.NothingDBNull(GetProperty(ItemIDProperty)));
            cm.Parameters.AddWithValue("@MovieItemID", Singular.Misc.NothingDBNull(GetProperty(MovieItemIDProperty)));
            cm.Parameters.AddWithValue("@UserID", Singular.Misc.NothingDBNull(GetProperty(UserIDProperty)));
            cm.Parameters.AddWithValue("@ItemDescription", GetProperty(ItemDescriptionProperty));
            cm.Parameters.AddWithValue("@itemQty", GetProperty(itemQtyProperty));
            cm.Parameters.AddWithValue("@itemPrice", GetProperty(itemPriceProperty));
            cm.Parameters.AddWithValue("@TotalPrice", GetProperty(TotalPriceProperty));
            cm.Parameters.AddWithValue("@BasketDate", Singular.Misc.NothingDBNull(BasketDate));
            cm.Parameters.AddWithValue("@IsActiveInd", Singular.Misc.NothingDBNull(GetProperty(IsActiveIndProperty)));
            cm.Parameters.AddWithValue("@DeleteDate", Singular.Misc.NothingDBNull(DeleteDate));
            cm.Parameters.AddWithValue("@DeletedBy", GetProperty(DeletedByProperty));
            cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(BasketIDProperty, scm.Parameters["@BasketID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@BasketID", GetProperty(BasketIDProperty));
        }

        #endregion

    }

}